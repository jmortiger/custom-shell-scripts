#!/usr/bin/env bash

# #region ########## DON'T GEN DOCUMENTATION ##########
if [ "$1" = '--help' ]; then
	exit 1
elif [ "$1" = '--version' ]; then
	exit 1
fi
# #endregion ########## DON'T GEN DOCUMENTATION ##########

##region########################################### GET PATH, DIR, & NAME ###########################################
readonly MY_PATH=$(realpath "$0")
MY_DIR=''
MY_NAME=''
if [[ "$MY_PATH" =~ ^(.*)/([^/]+)$ ]]; then
	readonly MY_DIR="${BASH_REMATCH[1]}" MY_NAME="${BASH_REMATCH[2]}"
else
	readonly MY_DIR="$HOME" MY_NAME="$0"
	echo "$MY_NAME: Failed to get dir" 1>&2
	exit 1
fi
##endregion######################################## GET PATH, DIR, & NAME ###########################################
##region########################################### CONSTANTS ###########################################

declare -ri MAX_INT=$(( 2**63 - 1 ))
declare -ri MAX_READ_INT=$(( 2**31 - 1))
# https://unix.stackexchange.com/questions/592159/how-to-read-file-in-bash-using-a-fixed-number-of-character#comment1104513_592159
# https://www.reddit.com/r/bash/comments/1cest8z/comment/l1o17vt/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
# https://www.reddit.com/r/bash/comments/1cest8z/comment/l1orak7/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
declare -ri MAX_READ_BUFFER=4096
# #region ########## SIGNALS ##########
# cspell:disable
# https://man7.org/linux/man-pages/man7/signal.7.html
readonly -A SIGNAL=(
	[HUP]=1 [SIGHUP]=1
	[INT]=2 [SIGINT]=2
	[QUIT]=3 [SIGQUIT]=3
	[ILL]=4 [SIGILL]=4
	[TRAP]=5 [SIGTRAP]=5
	[ABRT]=6 [SIGABRT]=6
	[IOT]=6 [SIGIOT]=6
	[BUS]=7 [SIGBUS]=7
	[FPE]=8 [SIGFPE]=8
	[KILL]=9 [SIGKILL]=9
	[USR1]=10 [SIGUSR1]=10
	[SEGV]=11 [SIGSEGV]=11
	[USR2]=12 [SIGUSR2]=12
	[PIPE]=13 [SIGPIPE]=13
	[ALRM]=14 [SIGALRM]=14
	[TERM]=15 [SIGTERM]=15
	[STKFLT]=16 [SIGSTKFLT]=16
	[CHLD]=17 [SIGCHLD]=17
	[CONT]=18 [SIGCONT]=18
	[STOP]=19 [SIGSTOP]=19
	[TSTP]=20 [SIGTSTP]=20
	[TTIN]=21 [SIGTTIN]=21
	[TTOU]=22 [SIGTTOU]=22
	[URG]=23 [SIGURG]=23
	[XCPU]=24 [SIGXCPU]=24
	[XFSZ]=25 [SIGXFSZ]=25
	[VTALRM]=26 [SIGVTALRM]=26
	[PROF]=27 [SIGPROF]=27
	[WINCH]=28 [SIGWINCH]=28
	[IO]=29 [SIGIO]=29 [POLL]=29 [SIGPOLL]=29
	[PWR]=30 [SIGPWR]=30
	[SYS]=31 [SIGSYS]=31
)
# readonly SIGEMT=7 # Emulator trap; weird definitions
# readonly SIGCLD=SIGCHLD # A synonym for SIGCHLD on MIPS
# readonly SIGINFO=SIGPWR # A synonym for SIGPWR; only on Alpha
# readonly SIGLOST=29 # File lock lost (unused); only on SPARC
# readonly SIGUNUSED=SIGSYS # Where defined, SIGUNUSED is synonymous with SIGSYS.  Since glibc 2.26, SIGUNUSED is no longer defined on any architecture.
# cspell:enable
# #endregion ########## SIGNALS ##########
##region################### TPUT COLORS ###################
# https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
declare -rA TPUT_COLOR=(
	[BLACK]=0
	[RED]=1
	[GREEN]=2
	[YELLOW]=3
	[BLUE]=4
	[MAGENTA]=5
	[CYAN]=6
	[WHITE]=7
	[BRIGHT_BLACK]=8
	[BRIGHT_RED]=9
	[BRIGHT_GREEN]=10
	[BRIGHT_YELLOW]=11
	[BRIGHT_BLUE]=12
	[BRIGHT_MAGENTA]=13
	[BRIGHT_CYAN]=14
	[BRIGHT_WHITE]=15
)
##endregion################ TPUT COLORS ###################
# /etc/inputrc
# https://unix.stackexchange.com/questions/116562/key-bindings-table
declare -Ar CTR_SEQ=(
	[home]=$'\e[H'
	[end]=$'\e[F'
	[up]=$'\e[A'
	[down]=$'\e[B'
	[right]=$'\e[C'
	[left]=$'\e[D'
)
case "$1" in
	MAX_INT) echo -n "${MAX_INT@A}"; exit 0;;
	MAX_READ_INT) echo -n "${MAX_READ_INT@A}"; exit 0;;
	CTR_SEQ) echo -n "${CTR_SEQ[@]@A}"; exit 0;;
	TPUT_COLOR) echo -n "${TPUT_COLOR[@]@A}"; exit 0;;
	SIGNAL) echo -n "${SIGNAL[@]@A}"; exit 0;;
	# *) exit 1;;
esac
##endregion######################################## CONSTANTS ###########################################
# New uses $LINENO/BASH_LINENO
##region################################# OLD EXIT WITH ERROR AND LINE #################################
# readonly MATCH_LINE='^[[:blank:]]*exit_error .*?'
# exit_error_old() {
# 	if [[ "$1" =~ ^[[:digit:]]+$ ]]; then local -ir errorCode=$1; shift; else local -ir errorCode=1; fi
# 	line=$(grep -m 1 -n -E -e "$MATCH_LINE($1)" "$MY_PATH")
# 	if [[ "$line" =~ ^([[:digit:]]+) ]]; then
# 		line="${BASH_REMATCH[1]}: "
# 	else
# 		line=''
# 	fi
# 	echo "$MY_NAME: $line$*" 1>&2
# 	exit $errorCode
# }
##endregion############################## OLD EXIT WITH ERROR AND LINE #################################

##region################################# NEW EXIT WITH ERROR AND LINE #################################
exit_error() {
	if [[ "$1" =~ ^[[:digit:]]+$ ]]; then local -ir errorCode=$1; shift; else local -ir errorCode=1; fi
	mapfile -t val < caller 0
	# echo "$MY_NAME: $line$*" 1>&2
	t_out="$MY_NAME: $*"$'\n'"${val[0]}"
	echo "$t_out" 1>&2
	exit $errorCode
}
##endregion############################## NEW EXIT WITH ERROR AND LINE #################################

#########################region GET OPTIONS#########################
# #region ########## METHOD 1 ##########
useLabels='false'
useValues='true'
while [ "$1" != "" ] && [ "$1" != '--' ]; do
    #If it's an option
    if [[ $1 =~ ^\- ]]; then
        useLabels='false'
        if [[ ${#VALUES[@]} -gt 0 ]]; then
            useValues='false'
        fi
    fi
    case $1 in
        # #region Flags
		-l | --labels )
		    useLabels='true'
		    ;;
		-t | --passthrough )
		    passthrough='true'
		    ;;
		-z | --zero_based )
		    zero_based='true'
		    ;;
		-r | --return_decoded )
		    decode_value_before_return='true'
		    ;;
		# #endregion Flags
        # #region Values
		-d | --decode | --decode_method )
		    shift
		    decode_method=$1
		    ;;
		-p | --prompt )
		    shift
		    prompt=$1
		    ;;
		-c | --option_count_format )
		    shift
		    option_count_format=$1
		    ;;
		-b | --blank_label )
		    shift
		    blank_label=$1
		    ;;
		--replace_blank_label_with )
		    shift
		    replace_blank_label_with=$1
		    ;;
		-f | --return_on_fail | --return_on_failure )
		    shift;
		    return_on_failure=$1
		    ;;
		# #endregion Values
        -h | --help )
            show_help
            exit
            ;;
        * )
            if $($useLabels); then
                LABELS[${#LABELS[@]}]=$1
            elif $($useValues); then
                VALUES[${#VALUES[@]}]=$1
            else
                show_help
                exit 1
            fi
            ;;
    esac
    shift
done
# #endregion ########## METHOD 1 ##########

# #region ########## ORDERED OR LABELED ##########
declare -n opt1=testCommand opt2=testPath opt3=testFile
while [[ -n "${1+x}" ]]; do
	case "$1" in
		(-h | --help)
			show_help
			exit
			;;
		(-v | --version)
			show_version
			exit
			;;
		# (-c | --coarseness)
		# 	shift
		# 	coarseInput="$1"
		# 	shift
		# 	;;
		# (-d | --decimal)
		# 	shift
		# 	separator="$1"
		# 	shift
		# 	;;
		(*)
			if [[ -n "${opt1+x}" ]]; then
				if [[ -n "${opt2+x}" ]]; then
					if [[ -n "${opt3+x}" ]]; then
						exit 1
					else
						opt3="$1"
					fi
				else
					opt2="$1"
				fi
			else
				opt1="$1"
			fi
			shift
			;;
	esac
done
# #endregion ########## ORDERED OR LABELED ##########
#########################endregion GET OPTIONS#########################

##region################## SHOW_HELP/VERSION TEMPLATE ####################
show_help() {
	# or:	$0 [-c COARSENESS] [-d SEPARATOR] NUMERATOR DENOMINATOR
	# -c, --coarseness COARSENESS: precision. Defaults to $DEFAULT_COARSENESS.
	# -d, --decimal SEPARATOR: the fractional separator. Defaults to $DEFAULT_DECIMAL
	cat << __EOF__
A template I didn't replace.

Usage:	$0
	or:	$0 --help
	or:	$0 --version

Options:
	-h, --help: Shows this help text.
	-v, --version: Shows version info.
__EOF__
}
show_version() {
	cat << __EOF__
$0 1.0.0

Copyright (C) 2025 Justin Morris
__EOF__
}
##endregion################ SHOW_HELP/VERSION TEMPLATE ###################