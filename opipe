#!/usr/bin/env bash

# https://www.kylheku.com/cgit/basta/tree/basta.sh?id=7fbdc5a088c37bd24da5954474a189cd4c890dce
# https://www.kylheku.com/cgit/basta/about/
readonly LOGFILE='/home/jmor/reposLocal/custom-shell-scripts/log.txt'
echo -n $'\n' >> $LOGFILE
date +'%T %D' >> $LOGFILE
# https://man7.org/linux/man-pages/man7/signal.7.html
readonly SIGHUP=1
readonly SIGINT=2
readonly SIGQUIT=3
readonly SIGTRAP=5
readonly SIGABRT=6
readonly SIGKILL=9
readonly SIGTERM=15
readonly SIGSTKFLT=16
readonly SIGCHLD=17
readonly SIGCONT=18
readonly SIGSTOP=19
readonly SIGTSTP=20
readonly SIGTTIN=21
readonly SIGTTOU=22
readonly SIGPROF=27
readonly SIGWINCH=28
readonly START_TEXT='

# Running:

$'
readonly ORIG_IFS=$IFS
current_count=0
current_length=0
init_row_col=($(cursor_pos))
display_text() {
	# tput smcup
	# init_pos=($(cursor_pos))
	# init_cols=$(tput cols)
	# init_lines=$(tput lines)
	length=${#1}
	tput sc
	tput cup $(($(tput lines) - 1)) 0 # $(($(tput cols) - length - 1))
	tput il1
	tput smso
	echo "$1"
	# tput rmso
	# tput rc
	# exit
	# tput rmcup
}
cumulative=""
line=""
sub_pid=0
exec 3< <("$@")
sub_pid=$!
out_pipe() {
	read -s -r -N 1 -u 3 line
}
is_active="true"
is_killing="false"
do_stop() {
	# shellcheck disable=SC2317
	if eval "$is_killing"; then
		kill -n "$1" "$sub_pid"
	else
		is_killing='true'
	fi
	# shellcheck disable=SC2317
	exitcode=$(wait "$sub_pid")
	# shellcheck disable=SC2317
	exec 3>&-
	# shellcheck disable=SC2317
	exit $exitcode
}
# shellcheck disable=SC2064
trap "do_stop $SIGINT" INT
# shellcheck disable=SC2064
trap "do_stop $SIGQUIT" QUIT
# shellcheck disable=SC2064
trap "do_stop $SIGTERM" TERM
# trap "do_stop $SIGKILL" KILL
declare -i start_int=0
declare -i completed=0
declare -i successful=0
readonly patsub_replacement_off=$(echo $( if [[ $(shopt patsub_replacement) =~ on$ ]]; then echo 'false'; else echo 'true'; fi ))
readonly extglob_off=$(echo $( if [[ $(shopt extglob) =~ on$ ]]; then echo 'false'; else echo 'true'; fi ))
while eval $is_active; do
	((current_count+=1))
	out_pipe
	if [ -n "$line" ]; then
		line="$line"
	elif kill -0 $sub_pid > /dev/null 2>&1; then
		line=''
		echo "(empty)"
	else
		echo -e "\nDONE!"
		is_active="false"
	fi
	if eval $is_active; then
		echo -n "$line"
		cumulative+="$line"
	fi
	if (( start_int != 0 )); then
		if eval "$extglob_off"; then shopt -s extglob; fi
		if eval "$patsub_replacement_off"; then shopt -s patsub_replacement; fi
		results_string="${cumulative:start_int}"
		echo "$results_string" >> $LOGFILE
		# while [[ "$results_string" =~ $'\n' ]]; do
		while [[ "$results_string" =~ ^([.FEWC]+)(([^[:print:][:blank:]][^.][[:print:][:blank:]]*)+[^[:print:][:blank:]]*)(.*)$ ]]; do
			# echo "TO" >> $LOGFILE
			# echo "${BASH_REMATCH[1]}${BASH_REMATCH[4]}" >> $LOGFILE
			(cat <<- _EOF_
			TO
			${BASH_REMATCH[1]}${BASH_REMATCH[4]}

			_EOF_
			) >> $LOGFILE
			results_string="${BASH_REMATCH[1]}${BASH_REMATCH[4]}"
		done
		# while [[ "$results_string" =~ ^(\.+)([[:print:][:blank:]]*)(([^[:print:][:blank:]][^.][[:print:][:blank:]]*)+[^[:print:][:blank:]]*)(.*)$ ]]; do results_string="${BASH_REMATCH[1]}${BASH_REMATCH[5]}";done
		# done
		if eval "$extglob_off"; then shopt -u extglob; fi
		if eval "$patsub_replacement_off"; then shopt -u patsub_replacement; fi
		echo "Final (${#results_string}): $results_string" >> $LOGFILE
		completed=${#results_string}
		display_text "Completed: $completed"
		tput rmso
		tput rc
	elif [[ $cumulative =~ $START_TEXT ]]; then
		start_int=${#cumulative}
		declare -i -r start_int
	fi
done
echo "Successfully completed!"
echo "Iterations: $current_count
start_int: $start_int
Cumulative length: ${#cumulative}
Cumulative output:
$cumulative"
exit
# results_string='..............
# 1111111
# 22222222
# ....
# 3333333
# ..........
# Finished in 0.517201s, 46.4037 runs/s, 187.5481 assertions/s.
# 24 runs, 97 assertions, 0 failures, 0 errors, 0 skips
# '	[^[:print:][:blank:]]
# ^(\.+)([[:print:][:blank:]]*)([^[:print:][:blank:]][^.][[:print:][:blank:]]*)+
# ^(\.+)([[:print:][:blank:]]*)(([^[:print:][:blank:]][^.][[:print:][:blank:]]*)+[^[:print:][:blank:]]*)(.*)$