#!/usr/bin/env bash

# https://www.kylheku.com/cgit/basta/tree/basta.sh?id=7fbdc5a088c37bd24da5954474a189cd4c890dce
# https://www.kylheku.com/cgit/basta/about/

readonly LOGFILE='/home/jmor/reposLocal/custom-shell-scripts/log.txt'
echo -n $'\n' >> $LOGFILE
date +'%T %D' >> $LOGFILE
# #region Signals
# https://man7.org/linux/man-pages/man7/signal.7.html
# readonly SIGHUP=1
# readonly SIGTRAP=5
# readonly SIGABRT=6
# readonly SIGKILL=9
# readonly SIGSTKFLT=16
# readonly SIGCHLD=17
# readonly SIGCONT=18
# readonly SIGSTOP=19
# readonly SIGTSTP=20
# readonly SIGTTIN=21
# readonly SIGTTOU=22
# readonly SIGPROF=27
# readonly SIGWINCH=28
readonly SIGINT=2
readonly SIGQUIT=3
readonly SIGTERM=15
# #endregion Signals
readonly FAIL_TEXT="FAILURE"
readonly STATUS_CHARACTERS='.FEWC'
readonly NL_STUB='[:print:][:blank:]'
readonly NL_PATTERN='[^[:print:][:blank:]]'
readonly NON_NL_PATTERN='[[:print:][:blank:]]'
readonly NON_NL_NOR_STATUS_CHARACTERS="[ABDG-VXYZa-z!-,/[:digit:][:blank:]]"
readonly PATTERN="^([$STATUS_CHARACTERS]+)((${NL_PATTERN}[^.]$NON_NL_PATTERN*)+$NL_PATTERN*)(.*)$"
# readonly PATTERN="^([$STATUS_CHARACTERS]+)(($NL_PATTERN+[$STATUS_CHARACTERS]*$NON_NL_NOR_STATUS_CHARACTERS$NON_NL_PATTERN*)+$NL_PATTERN*)(.*)$"
readonly START_TEXT='

# Running:

$'
readonly ORIG_IFS=$IFS
current_count=0
display_text() {
	local -r text="$1"
	# tput smcup
	# init_pos=($(cursor_pos))
	# init_cols=$(tput cols)
	# init_lines=$(tput lines)
	tput sc
	tput cup $(($(tput lines) - 1)) 0 # $(($(tput cols) - ${#text} - 1))
	tput il1
	tput smso
	echo "$text"
	# tput rmso
	# tput rc
	# exit
	# tput rmcup
}
cumulative=""
line=""
exec 3< <("$@")
declare -i -r sub_pid=$!
out_pipe() {
	read -s -r -N 1 -u 3 line
}
is_active="true"
is_killing="false"
do_stop() {
	# shellcheck disable=SC2317
	if eval "$is_killing"; then
		kill -n "$1" "$sub_pid"
	else
		is_killing='true'
	fi
	# shellcheck disable=SC2317
	exitcode=$(wait "$sub_pid")
	# shellcheck disable=SC2317
	declare -i -r exitcode
	# shellcheck disable=SC2317
	exec 3>&-
	# shellcheck disable=SC2317
	exit $exitcode
}
# shellcheck disable=SC2064
trap "do_stop $SIGINT" INT
# shellcheck disable=SC2064
trap "do_stop $SIGQUIT" QUIT
# shellcheck disable=SC2064
trap "do_stop $SIGTERM" TERM
# trap "do_stop $SIGKILL" KILL
declare -i start_int=0
declare -i c_complete=0 c_successful=0 c_failure=0 c_error=0
readonly sp="(^|$NL_PATTERN)([$STATUS_CHARACTERS]+)$"
readonly patsub_replacement_off=$( if [[ $(shopt patsub_replacement) =~ on$ ]]; then echo 'false'; else echo 'true'; fi )
readonly extglob_off=$( if [[ $(shopt extglob) =~ on$ ]]; then echo 'false'; else echo 'true'; fi )
# #region modify_values
function modify_values() {
	local -r appended="$1"
	local -i i
	if [ "$2" = "-" ]; then
		local -r operand="-"
	else
		local -r operand="+"
	fi
	local -I -n target=c_successful
	for (( i=0; i < ${#appended}; i+=1 )); do
		case "${appended:$i:1}" in
			[.])
				local -n target=c_successful
				# (( c_successful-=1 ))
				;;
			F)
				local -n target=c_failure
				# (( c_failure-=1 ))
				;;
			E)
				local -n target=c_error
				# (( c_error-=1 ))
				;;
			*)
				local -I -n target=FAIL_TEXT
				# (( c_error-=1 ))
				echo "Something's wrong"
				;;
		esac
		if [ $target != $FAIL_TEXT ]; then
			# shellcheck disable=SC2091 disable=SC2271 disable=SC1105
			(( target$operand=1 ))
			# shellcheck disable=SC2091 disable=SC2271 disable=SC1105
			(( c_complete$operand=1 ))
		fi
	done
	# # shellcheck disable=SC2091 disable=SC2271 disable=SC1105
	# (( c_complete$operand=${#appended} ))
	# case "$appended" in
	# 	[.])
	# 		# shellcheck disable=SC2091 disable=SC2271 disable=SC1105
	# 		(( c_successful$operand=1 ))
	# 		;;
	# 	F)
	# 		# shellcheck disable=SC2091 disable=SC2271 disable=SC1105
	# 		(( c_failure+=1 ))
	# 		;;
	# 	E)
	# 		# shellcheck disable=SC2091 disable=SC2271 disable=SC1105
	# 		(( c_error+=1 ))
	# 		;;
	# 	*)
	# 		# shellcheck disable=SC2091 disable=SC2271 disable=SC1105
	# 		# (( c_error+=1 ))
	# 		echo "Something's wrong"
	# 		;;
	# esac
}
# #endregion modify_values
while eval $is_active; do
	((current_count+=1))
	out_pipe
	echo "Newest input (raw): $line" >> $LOGFILE
	test
	if [ -z "$line" ]; then
		if kill -0 $sub_pid > /dev/null 2>&1; then
			line=''
			echo "(empty)"
		else
			echo -e "\nDONE!"
			is_active="false"
		fi
	fi
	if eval $is_active; then
		echo -n "$line"
		cumulative+="$line"
		if (( start_int != 0 )) && [ -n "$line" ]; then
			if eval "$extglob_off"; then shopt -s extglob; fi
			if eval "$patsub_replacement_off"; then shopt -s patsub_replacement; fi
			results_string="${cumulative:start_int}"
			echo "$results_string" >> $LOGFILE
			if [[ "$results_string" =~ $sp ]]; then
				modify_values "$line"
			elif [[ "${results_string:0:-1}" =~ $sp ]] && [ "${results_string: -1:1}" != $'\n' ]; then
				modify_values "${BASH_REMATCH[2]}" '-'
			fi
			# while [[ "$results_string" =~ $PATTERN ]]; do
			# 	# echo "TO" >> $LOGFILE
			# 	# echo "${BASH_REMATCH[1]}${BASH_REMATCH[4]}" >> $LOGFILE
			# 	(cat <<- _EOF_
			# 	TO
			# 	${BASH_REMATCH[1]}${BASH_REMATCH[4]}
			#
			# 	_EOF_
			# 	) >> $LOGFILE
			# 	results_string="${BASH_REMATCH[1]}${BASH_REMATCH[4]}"
			# done
			if eval "$extglob_off"; then shopt -u extglob; fi
			if eval "$patsub_replacement_off"; then shopt -u patsub_replacement; fi
			# c_complete=${#results_string}
			# t_buffer=$(echo "$results_string" | sed -E "s/[^.]//g")
			# c_successful=${#t_buffer}
			# t_buffer=$(echo "$results_string" | sed -E "s/[^F]//g")
			# c_failure=${#t_buffer}
			# t_buffer=$(echo "$results_string" | sed -E "s/[^E]//g")
			# c_error=${#t_buffer}
			# echo "Final: $results_string" >> $LOGFILE
			echo "Completed: $c_complete, Successful: $c_successful, Failures: $c_failure" >> $LOGFILE
			# display_text "Completed: $c_complete"
			# tput rmso
			# tput rc
		elif [[ $cumulative =~ $START_TEXT ]]; then
			start_int=${#cumulative}
			declare -i -r start_int
		fi
	fi
done
echo "Successfully completed!"
echo "Iterations: $current_count
start_int: $start_int
Cumulative length: ${#cumulative}
Cumulative output:
$cumulative"
exit
# results_string='..............
# 1111111
# 22222222
# ....
# 3333333
# ..........
# Finished in 0.517201s, 46.4037 runs/s, 187.5481 assertions/s.
# 24 runs, 97 assertions, 0 failures, 0 errors, 0 skips
# '	[^[:print:][:blank:]]
# ^(\.+)([[:print:][:blank:]]*)([^[:print:][:blank:]][^.][[:print:][:blank:]]*)+
# ^(\.+)([[:print:][:blank:]]*)(([^[:print:][:blank:]][^.][[:print:][:blank:]]*)+[^[:print:][:blank:]]*)(.*)$