#!/usr/bin/env bash

# https://www.kylheku.com/cgit/basta/tree/basta.sh?id=7fbdc5a088c37bd24da5954474a189cd4c890dce
# https://www.kylheku.com/cgit/basta/about/

readonly DO_LOG='false'
readonly LOGFILE='/home/jmor/reposLocal/custom-shell-scripts/log.txt'
eval "$DO_LOG" && (echo -n $'\n' >> $LOGFILE)
eval "$DO_LOG" && (date +'%T %D' >> $LOGFILE)
# #region Signals
# https://man7.org/linux/man-pages/man7/signal.7.html
# readonly SIGHUP=1
# readonly SIGTRAP=5
# readonly SIGABRT=6
# readonly SIGKILL=9
# readonly SIGSTKFLT=16
# readonly SIGCHLD=17
# readonly SIGCONT=18
# readonly SIGSTOP=19
# readonly SIGTSTP=20
# readonly SIGTTIN=21
# readonly SIGTTOU=22
# readonly SIGPROF=27
# readonly SIGWINCH=28
readonly SIGINT=2
readonly SIGQUIT=3
readonly SIGTERM=15
# #endregion Signals
readonly FAIL_TEXT="FAILURE"
readonly START_TEXT='

# Running:

$'
readonly STATUS_CHARACTERS='.FEWC'
readonly NL_STUB='[:print:][:blank:]'
readonly NL_PATTERN='[^[:print:][:blank:]]'
readonly NON_NL_PATTERN='[[:print:][:blank:]]'
readonly NON_NL_NOR_STATUS_CHARACTERS="[ABDG-VXYZa-z!-,/[:digit:][:blank:]]"
readonly PATTERN="^([$STATUS_CHARACTERS]+)((${NL_PATTERN}[^.]$NON_NL_PATTERN*)+$NL_PATTERN*)(.*)$"
# readonly PATTERN="^([$STATUS_CHARACTERS]+)(($NL_PATTERN+[$STATUS_CHARACTERS]*$NON_NL_NOR_STATUS_CHARACTERS$NON_NL_PATTERN*)+$NL_PATTERN*)(.*)$"
display_text() {
	local -r text="$1"
	local -r whole_text="$2"
	local -r delta="$3"
	clear
	echo "$whole_text"
	tput cup $(($(tput lines) - 1)) 0 # $(($(tput cols) - ${#text} - 1))
	tput smso
	echo -n "$text"
	tput rmso
}
cumulative=""
line=""
exec 3< <("$@")
declare -i -r sub_pid=$!
out_pipe() {
	read -s -r -N 1 -u 3 line
}
# #region Exit handling
is_active="true"
is_killing="false"
do_stop() {
	# shellcheck disable=SC2317
	if eval "$is_killing"; then
		kill -n "$1" "$sub_pid"
	else
		is_killing='true'
	fi
	# shellcheck disable=SC2317
	exitcode=$(wait "$sub_pid")
	# shellcheck disable=SC2317
	declare -i -r exitcode
	# shellcheck disable=SC2317
	exec 3>&-
	# shellcheck disable=SC2317
	exit $exitcode
}
# shellcheck disable=SC2064
trap "do_stop $SIGINT" INT
# shellcheck disable=SC2064
trap "do_stop $SIGQUIT" QUIT
# shellcheck disable=SC2064
trap "do_stop $SIGTERM" TERM
# #endregion Exit handling
declare -i c_complete=0 c_successful=0 c_failure=0 c_error=0
# #region modify_values
function modify_values() {
	local -r appended="$1"
	local -i i
	if [ "$2" = "-" ]; then
		local -r operand="-"
	else
		local -r operand="+"
	fi
	local -I -n target=c_successful
	for (( i=0; i < ${#appended}; i+=1 )); do
		case "${appended:$i:1}" in
			F)
				local -n target=c_failure
				;;
			E)
				local -n target=c_error
				;;
			[.])
				local -n target=c_successful
				;;
			*)
				local -I -n target=FAIL_TEXT
				echo "Something's wrong"
				;;
		esac
		if [ $target != $FAIL_TEXT ]; then
			# shellcheck disable=SC2091 disable=SC2271 disable=SC1105
			((target$operand=1))
			# shellcheck disable=SC2091 disable=SC2271 disable=SC1105
			((c_complete$operand=1))
		fi
	done
}
# #endregion modify_values
gen_status_text() {
	echo -n "Completed: $c_complete, Successful: $c_successful, Failures: $c_failure, Errors: $c_error"
}
declare -i c_iterations=0 start_int=0
readonly sp="(^|$NL_PATTERN)([$STATUS_CHARACTERS]+)$"
readonly patsub_replacement_off=$( if [[ $(shopt patsub_replacement) =~ on$ ]]; then echo 'false'; else echo 'true'; fi )
readonly extglob_off=$( if [[ $(shopt extglob) =~ on$ ]]; then echo 'false'; else echo 'true'; fi )
tput sc
tput civis
# tput smcup
# trap 'tput rc;tput rmcup' EXIT
# trap 'tput rc; tput cnorm' EXIT
status_text="WAITING..."
while eval $is_active; do
	((c_iterations+=1))
	out_pipe
	eval "$DO_LOG" && (echo "Newest input (raw): $line" >> $LOGFILE)
	if [ -z "$line" ]; then
		if kill -0 $sub_pid > /dev/null 2>&1; then
			line=''
		else
			is_active="false"
		fi
	fi
	if eval $is_active && [ -n "$line" ]; then
		cumulative+="$line"
		if ((start_int != 0)); then
			if eval "$extglob_off"; then shopt -s extglob; fi
			if eval "$patsub_replacement_off"; then shopt -s patsub_replacement; fi
			results_string="${cumulative:start_int}"
			eval "$DO_LOG" && (echo "$results_string" >> $LOGFILE)
			if [[ "$results_string" =~ $sp ]]; then
				modify_values "$line"
			elif [[ "${results_string:0:-1}" =~ $sp ]] && [ "${results_string: -1:1}" != $'\n' ]; then
				modify_values "${BASH_REMATCH[2]}" '-'
			fi
			if eval "$extglob_off"; then shopt -u extglob; fi
			if eval "$patsub_replacement_off"; then shopt -u patsub_replacement; fi
			# shellcheck disable=SC2005
			eval "$DO_LOG" && (echo "$(gen_status_text)" >> $LOGFILE)
			status_text="$(gen_status_text)"
		elif [[ $cumulative =~ $START_TEXT ]]; then
			start_int=${#cumulative}
			declare -i -r start_int
		fi
		display_text "$status_text" "$cumulative" "$line"
	fi
done
tput rc
# tput rmcup
tput cnorm
echo "Successfully completed!"
output="Iterations: $c_iterations
start_int: $start_int
Cumulative length: ${#cumulative}
Cumulative output:
$cumulative"
echo "$output"
eval "$DO_LOG" && (echo "$output" >> $LOGFILE)
exit