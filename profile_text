#!/usr/bin/env bash

# cspell:ignore ilos OVERRIDERS extglob
readonly C_OUTPUT_ROWS='ROWS'
readonly C_OUTPUT_MAX_COLS='MAX_COLUMNS'
readonly C_OUTPUT_MAX_CHARACTERS_IN_A_ROW='MAX_CHARS'
readonly C_OUTPUT_MAX_COLS_AT='MAX_COLUMNS_AT'
readonly C_OUTPUT_COLS_AT='COLUMNS_AT'
readonly C_OUTPUT_CHARS_AT='CHARS_AT'
readonly C_OUTPUT_ROW_AT='ROW_AT'
readonly C_OUTPUT_ROW_PRECEDED_BY='ROW_PRECEDED'
readonly C_OUTPUT_ROW_SUCCEEDED_BY='ROW_SUCCEEDED'
readonly C_OUTPUT_COLS_AT_REGEX='^[[:digit:]]+$|^_$'
readonly NL_PATTERN='[^[:print:][:blank:]]'
readonly NON_NL_PATTERN='[[:print:][:blank:]]'
readonly C_TRAILING_CTRL_OVERRIDERS='^-[mc]$|^--(max_col|col_at)$'
# TODO: Output multiple
# #region show_help
show_help() {
	cat <<- __EOF__
	profile_text - Retrieve statistics about the input text.

	profile_text [OPTIONS] TEXT | profile_text -h | profile_text --help
	
	Retrieve statistics about the input text.
	
	Parameters:
		Output:
	    	-h | --help: Display this help text.
			-r | --rows: get the total number of rows
			-c | --col_at INDEX: Get the # of columns on the specified row INDEX (or, if '_', the last index). Negative indices are subtracted from length (e.g. -1 = length - 1). By default, turns off appending control characters (See '--no_trailing_control').
			--chars_at INDEX: Get the # of characters on the specified row INDEX (or, if '_', the last index). Negative indices are subtracted from length (e.g. -1 = length - 1). By default, turns off appending control characters (See '--no_trailing_control').
			-m | --max_col: Get the maximum number of columns (i.e characters +/- offset due to control characters) in any row. By default, turns off appending control characters (See '--no_trailing_control').
			--max_col_at: Get the row index of the maximum number of columns (i.e characters +/- offset due to control characters) in a row. By default, turns off appending control characters (See '--no_trailing_control'). # TODO: FIGURE OUT TIES
			--max_chars_in_row: Get the maximum number of characters in any row. By default, turns off appending control characters (See '--no_trailing_control').
			--row_at INDEX: Get the text on the row specified by INDEX (or, if '_', the last index).
			--row_preceded_by INDEX REGEX: Does the text preceding the row specified by INDEX (or, if '_', the last index) match the given REGEX. Negative indices are subtracted from length (e.g. -1 = length - 1). If matched, returns \${BASH_REMATCH[*]} and an exit status of true; otherwise, returns nothing with an exit status of false.
			--row_succeeded_by INDEX REGEX: Does the text following the row specified by INDEX (or, if '_', the first index) match the given REGEX. Negative indices are subtracted from length (e.g. -1 = length - 1). If matched, returns \${BASH_REMATCH[*]} and an exit status of true; otherwise, returns nothing with an exit status of false.
			--rows_where [PRE] REGEX [POST]: Get the rows whose preceding rows match PRE (if not '*'), succeeding rows match POST (if not '*'), and body matches the given REGEX. If matched, returns each \${BASH_REMATCH[*]} (for REGEX only) and an exit status of true; otherwise, returns nothing with an exit status of false.
		Settings:
			--edit_mode: Act as though editing text; inverse of display_mode.
				* Offset column placements by 1 to account for an invisible cursor
			--display_mode: Act as though displaying text; inverse of edit_mode. Default.
				* All outputs are based on the text entered. A row with 10 characters starting on column 0 will end on column 9
			--initial_column_offset: The starting horizontal position of the cursor. Defaults to 0.
			--no_trailing_control: don't append control characters to the lines they end.
			--trailing_control: do append control characters to the lines they end.
			--output_columns: The number of characters permitted in each line of the output. Defaults to 'tput cols'.
			--output_rows: The number of lines of text in the output's view. Excess output will be handled with vertical overflow. Defaults to 'tput lines'.
	EXIT STATUS:
		0 if successful
	__EOF__
}
# #endregion show_help

readonly ORIG_IFS=$IFS
# #region PARAMS
# TODO: Add option - Modify text in accordance w/ control characters like backspace & CR?
# TODO: IMPLEMENT max_chars_in_row
# TODO: IMPLEMENT rows_where
# TODO: IMPLEMENT p_debugLevel
allow_continue='true'
shopt -s 'extglob'
# readonly extglob_off=$( if [[ $(shopt extglob) =~ on$ ]]; then echo 'false'; else echo 'true'; fi )
# if eval $extglob_off; then; shopt -s 'extglob'; fi
declare -i TERM_COLS=$(tput cols) TERM_ROWS=$(tput lines)
declare -i initial_line_offset=0 initial_line_offset_unwrapped=0
declare p_trailing_control_chars='true'
declare flagTrackRows='false'
declare flagTrackUnwrapped='false'
# Add 1 invisible character to values to emulate a cursor (e.g. if TERM_COLS=100 & there are 100 characters w/o a new line, row count would be 1 if false, 2 if true, b/c the cursor would overflow to a new line)
declare flagEditMode='false'
# declare flagDebug='false'
declare -i p_debugLevel=0
declare flagMaxCharMode='true'
while (( $# > 1 )) && eval $allow_continue; do
	case "$1" in
		( -h | --help )
			show_help
			exit 0
			;;
		( -d | --debug )
			# declare -r flagDebug='true'
			if t=$(check_number "$2"); then
				declare -r -i p_debugLevel=$t
			else
				declare -r -i p_debugLevel=255
			fi
			;;
		( --output_columns )
			shift
			if [[ "$1" =~ ^[123456789]+[[:digit:]]*$ ]]; then
		    	declare -r -g -i TERM_COLS="$1"
				if [ ! $? ]; then exit 1; fi
			# elif [ "$1" = '_' ]; then :; # index is last entry
			else
				echo "output_columns must be a positive integer; value was '$1'"
            	show_help
            	exit 1
			fi
			;;&
		( --output_rows )
			shift
			if [[ "$1" =~ ^[123456789]+[[:digit:]]*$ ]]; then
		    	declare -r -g -i TERM_ROWS="$1"
				if [ ! $? ]; then exit 1; fi
			# elif [ "$1" = '_' ]; then :; # index is last entry
			else
				echo "output_rows must be a positive integer; value was '$1'"
            	show_help
            	exit 1
			fi
			;;&
		( --initial_column_offset )
			shift
			if [[ "$1" =~ ^[[:digit:]]+$ ]]; then
		    	declare -g -i initial_line_offset="$1" initial_line_offset_unwrapped="$1"
				if [ ! $? ]; then exit 1; fi
			# elif [ "$1" = '_' ]; then :; # index is last entry
			else
				echo "initial_column_offset must be a non-negative integer; value was '$1'"
            	show_help
            	exit 1
			fi
			;;&
		( --edit_mode )
			declare -r flagEditMode='true'
			if [ ! $? ]; then exit 1; fi
			;;&
		( --display_mode )
			declare -r flagEditMode='false'
			if [ ! $? ]; then exit 1; fi
			;;&
		( --no_trailing_control )
			declare -r p_trailing_control_chars='false'
			if [ ! $? ]; then exit 1; fi
			;;&
		( --trailing_control )
			declare -r p_trailing_control_chars='true'
			if [ ! $? ]; then exit 1; fi
			;;&
		( -r | --rows )
			declare -r p_output=$C_OUTPUT_ROWS
			if [ ! $? ]; then exit 1; fi
			;;&
		( --max_col_at )
			declare -r p_output=$C_OUTPUT_MAX_COLS_AT
			if [ ! $? ]; then exit 1; fi
			if ! declare -p p_trailing_control_chars | grep -q -P -e '-r' -; then
				p_trailing_control_chars='false'
			fi
			declare -r flagTrackRows='true'
			declare -r flagMaxCharMode='false'
			# if [ ! $? ]; then exit 1; fi
			;;&
		( -m | --max_col )
			declare -r p_output=$C_OUTPUT_MAX_COLS
			if [ ! $? ]; then exit 1; fi
			if ! declare -p p_trailing_control_chars | grep -q -P -e '-r' -; then
				p_trailing_control_chars='false'
			fi
			declare -r flagTrackRows='true'
			declare -r flagMaxCharMode='false'
			# if [ ! $? ]; then exit 1; fi
			;;&
		( --max_chars_in_row )
			declare -r p_output=$C_OUTPUT_MAX_CHARACTERS_IN_A_ROW
			if [ ! $? ]; then exit 1; fi
			if ! declare -p p_trailing_control_chars | grep -q -P -e '-r' -; then
				p_trailing_control_chars='false'
			fi
			declare -r flagTrackRows='true'
			declare -r flagMaxCharMode='true'
			# if [ ! $? ]; then exit 1; fi
			;;&
		( --row_preceded_by )
			declare -r p_output=$C_OUTPUT_ROW_PRECEDED_BY
			if [ ! $? ]; then exit 1; fi
			shift
			if [[ "$1" =~ ^(-|\+)?[[:digit:]]+$ ]]; then
		    	declare -r -g -i p_index="$1"
				if [ ! $? ]; then exit 1; fi
			elif [ "$1" = '_' ]; then :; # index is last entry
			else
				echo "row_preceded_by's INDEX must be a signed integer or a _; value was '$1'"
            	show_help
            	exit 1
			fi
			shift
			declare -r -g p_regex="$1"
			declare -r flagTrackRows='true'
			# if [ ! $? ]; then exit 1; fi
			;;&
		( --row_succeeded_by )
			declare -r p_output=$C_OUTPUT_ROW_SUCCEEDED_BY
			if [ ! $? ]; then exit 1; fi
			shift
			if [[ "$1" =~ ^(-|\+)?[[:digit:]]+$ ]]; then
		    	declare -r -g -i p_index="$1"
				if [ ! $? ]; then exit 1; fi
			elif [ "$1" = '_' ]; then :; # index is last entry
			else
				echo "row_succeeded_by's INDEX must be a signed integer or a _; value was '$1'"
            	show_help
            	exit 1
			fi
			declare -r -g p_regex="$1"
			shift
			declare -r flagTrackRows='true'
			# if [ ! $? ]; then exit 1; fi
			;;&
		( --chars_at )
			declare -r p_output=$C_OUTPUT_CHARS_AT
			if [ ! $? ]; then exit 1; fi
			if ! declare -p p_trailing_control_chars | grep -q -P -e '-r' -; then
				p_trailing_control_chars='false'
			fi
			shift
			if [[ "$1" =~ ^(-|\+)?[[:digit:]]+$ ]]; then
		    	declare -r -g -i p_index="$1"
				if [ ! $? ]; then exit 1; fi
			elif [ "$1" = '_' ]; then :; # index is last entry
			else
				echo "chars_at must be a signed integer or a _; value was '$1'"
            	show_help
            	exit 1
			fi
			declare -r flagTrackRows='true'
			declare -r flagMaxCharMode='true'
			# if [ ! $? ]; then exit 1; fi
			;;&
		( -c | --col_at )
			declare -r p_output=$C_OUTPUT_COLS_AT
			if [ ! $? ]; then exit 1; fi
			if ! declare -p p_trailing_control_chars | grep -q -P -e '-r' -; then
				p_trailing_control_chars='false'
			fi
			shift
			if [[ "$1" =~ ^(-|\+)?[[:digit:]]+$ ]]; then
		    	declare -r -g -i p_index="$1"
				if [ ! $? ]; then exit 1; fi
			elif [ "$1" = '_' ]; then :; # index is last entry
			else
				echo "col_at must be a signed integer or a _; value was '$1'"
            	show_help
            	exit 1
			fi
			declare -r flagTrackRows='true'
			declare -r flagMaxCharMode='false'
			# if [ ! $? ]; then exit 1; fi
			;;&
		( --row_at )
			declare -r p_output=$C_OUTPUT_ROW_AT
			if [ ! $? ]; then exit 1; fi
			shift
			if [[ "$1" =~ ^(-|\+)?[[:digit:]]+$ ]]; then
		    	declare -r -g -i p_index="$1"
				if [ ! $? ]; then exit 1; fi
			elif [ "$1" = '_' ]; then :; # index is last entry
			else
				echo "row_at must be a signed integer or a _; value was '$1'"
            	show_help
            	exit 1
			fi
			declare -r flagTrackRows='true'
			# if [ ! $? ]; then exit 1; fi
			;;&
		( -[[:alpha:]] | --+([[:alpha:]_]) )
			# echo "Gen called"
			shift
			;;
		( ^--$ )
			# echo -n "Premature "
			shift
			;&
		( * )
			# echo "end called"
			allow_continue='false'
			;;
	esac
done
# echo "Out of param loop"
if [[ -z "${p_output+SET}" ]]; then declare -r p_output=$C_OUTPUT_ROWS; fi
# #region Validate
((initial_line_offset%=TERM_COLS))
# #endregion Validate
# #endregion PARAMS

readonly text="$*"

declare -r -i C_LENGTH=${#text}

# declare -r -i TERM_COLS=$(tput cols) TERM_ROWS=$(tput lines)

declare -i c_rows=1 # c_rows_unwrapped=1

# TODO: Finish optimizing for requested values
# TODO: Finish unwrapped stuff
declare -a rows=("") # rows_unwrapped=("")
# declare -i initial_line_offset=0 initial_line_offset_unwrapped=0
declare -a row_ilos=([0]=$initial_line_offset) # row_ilos_unwrapped=([0]=$initial_line_offset_unwrapped) # TODO: TRACK ROWS
declare -i char_offset=0 trailing_count=0
declare uninterrupted_line="" # uninterrupted_line_unwrapped=""
declare -i max_col=-1 max_col_at=-1
is_not_at_end() ((char_offset < $C_LENGTH))
is_at_end() ((char_offset >= $C_LENGTH))
# echo "Length: $C_LENGTH"
while is_not_at_end; do
	# echo "${#rows[@]}"
	# echo "c_rows at loop start: $c_rows"
	text_segment=${text:char_offset}
	# echo -n "char_offset: $char_offset -> "
	if [[ $text_segment =~ ^($NON_NL_PATTERN*)($NL_PATTERN) ]]; then
		((char_offset+=${#BASH_REMATCH[0]}))
		uninterrupted_line=${BASH_REMATCH[1]}
		ctl_char=${BASH_REMATCH[2]}
	else
		((char_offset+=${#text_segment}))
		uninterrupted_line=$text_segment
		unset ctl_char
	fi
	# echo "$char_offset"
	# [[ -n "${ctl_char+x}" ]] && echo "matched ${BASH_REMATCH[*]}"
	# uninterrupted_line_unwrapped=$uninterrupted_line
	# ((initial_line_offset_unwrapped+=${#uninterrupted_line}))
	if ! eval $flagTrackRows; then
		((initial_line_offset+=${#uninterrupted_line}, t=initial_line_offset <= 0 || initial_line_offset%TERM_COLS>0?initial_line_offset:initial_line_offset-1, c_rows+=t/TERM_COLS))
		# ((initial_line_offset+=${#uninterrupted_line}))
		# # If accounting for the cursor & at the end or the line doesn't perfectly fill the last row, 
		# if ((initial_line_offset%TERM_COLS>0)) || eval $flagEditMode && is_at_end; then 
		# 	((t=initial_line_offset))
		# else
		# 	((t=initial_line_offset-1))
		# fi
		# ((c_rows+=t/TERM_COLS))
	else
		((t_ilo=initial_line_offset, t_spaceInLine=TERM_COLS-t_ilo, initial_line_offset+=${#uninterrupted_line}))
		for ((t_off=0, t_inc=1; ${#uninterrupted_line} - t_off > 0; t_off+=t_spaceInLine, t_spaceInLine=TERM_COLS, c_rows+=t_inc, t_ilo=0)); do
			# if ((t_off + t_spaceInLine > ${#uninterrupted_line})); then
			# if ((t_spaceInLine > ${#uninterrupted_line} - t_off)); then
			if ((${#uninterrupted_line} - t_off < t_spaceInLine)); then
				t_seg="${uninterrupted_line:t_off}"
				((t_inc=0))
			else
				t_seg="${uninterrupted_line:t_off:t_spaceInLine}"
				((t_inc=1))
			fi
			# echo "c_rows: $c_rows rows.length: ${#rows[@]} $t_seg"
			rows[-1]+="$t_seg"
			# TODO: Account for potential line terminator in column length when p_trailing_control_chars
			# ((max_col = max_col < ${#t_seg} ? ${#t_seg} : max_col))
			if eval $flagMaxCharMode; then
				if ((max_col < ${#t_seg})); then
					((max_col = ${#t_seg}, max_col_at=${#rows[@]}-1))
				fi
			else
				# if ((max_col + ${row_ilos[$max_col_at]} < t_ilo + ${#t_seg})); then
				# 	((max_col = ${#t_seg}, max_col_at=${#rows[@]}-1))
				# fi
				if ((max_col < ${#t_seg} + t_ilo)); then
					((max_col = ${#t_seg} + t_ilo, max_col_at=${#rows[@]}-1))
				fi
			fi
			if ((t_inc > 0)); then
				rows+=("")
				row_ilos+=("$t_ilo")
			fi
			# echo "${rows[-1]}"
			# echo "rows.length: ${#rows[@]}"
		done
		# echo -n "Line: $uninterrupted_line; rows.length: ${#rows[@]}"
		# if [[ -z "$uninterrupted_line" ]]; then rows+=(""); fi
		# echo "-> ${#rows[@]}"
	fi
	# echo "c_rows before: $c_rows"
	# if [[ -n "${ctl_char+x}" ]]; then
	[[ -n "${ctl_char+x}" ]] && case "$ctl_char" in
		($'\v')
			# echo 'control char=\v'
			((c_rows+=1, c_rows_unwrapped+=1)) # For the new line
			((initial_line_offset%=TERM_COLS))
			if eval $flagTrackRows; then 
				if eval $p_trailing_control_chars; then rows[-1]+="$ctl_char"; fi
				row_ilos+=("$initial_line_offset") # row_ilos+=($((TERM_COLS - t_spaceInLine)))
				rows+=("")
			fi
			;;
		($'\f')
			# echo 'control char=\f'
			((c_rows+=1, c_rows_unwrapped+=1)) # For the new line
			((initial_line_offset%=TERM_COLS))
			if eval $flagTrackRows; then 
				if eval $p_trailing_control_chars; then rows[-1]+="$ctl_char"; fi
				row_ilos+=("$initial_line_offset") # row_ilos+=($((TERM_COLS - t_spaceInLine)))
				rows+=("")
			fi
			;;
		# TODO: Check if CR on wrapped line will return to start of wrapped line or unwrapped line
		($'\r')
			# echo 'control char=\r'
			# ((trailing_count=initial_line_offset_unwrapped))
			((initial_line_offset=0, initial_line_offset_unwrapped=0))
			if eval $flagTrackRows; then 
				if eval $p_trailing_control_chars; then rows[-1]+="$ctl_char"; fi
				# row_ilos[-1]=("$initial_line_offset") # row_ilos+=("0")
			fi
			;;
		# TODO: Finish handling trailing chars
		($'\b')
			# echo 'control char=\b'
			# ((trailing_count=initial_line_offset_unwrapped))
			((initial_line_offset-=1, initial_line_offset_unwrapped-=1))
			if eval $flagTrackRows; then 
				if eval $p_trailing_control_chars; then rows[-1]+="$ctl_char"; fi
				# row_ilos[-1]=("$initial_line_offset") # row_ilos+=("0")
			fi
			;;
		($'\n')
			# echo 'control char=\n'
			((c_rows+=1)) # For the new line
			((initial_line_offset=0))
			if eval $flagTrackUnwrapped; then
				((c_rows_unwrapped+=1)) # For the new line
				((initial_line_offset_unwrapped=0))
			fi
			if eval $flagTrackRows; then 
				if eval $p_trailing_control_chars; then rows[-1]+="$ctl_char"; fi
				rows+=("")
				row_ilos+=("$initial_line_offset") # row_ilos+=("0")
			fi
			;;
		(*)
			# echo "control char=idk, $ctl_char"
			((c_rows+=1)) # For the new line
			((initial_line_offset=0))
			if eval $flagTrackUnwrapped; then
				((c_rows_unwrapped+=1)) # For the new line
				((initial_line_offset_unwrapped=0))
			fi
			if eval $flagTrackRows; then 
				if eval $p_trailing_control_chars; then rows[-1]+="$ctl_char"; fi
				rows+=("")
				row_ilos+=("$initial_line_offset") # row_ilos+=("0")
			fi
			;;
		# fi
	# fi
	esac
	# If accounting for the cursor, at the end, & the line perfectly fills the last row.
	if eval $flagEditMode && ((initial_line_offset > 0 && initial_line_offset%TERM_COLS==0)) && is_at_end; then
		if eval $flagTrackRows; then 
			rows+=("")
			row_ilos+=("0")
		fi
		((c_rows+=1))
	fi
	# echo "c_rows after: $c_rows"
	if [[ -n "${p_index+x}" ]] && ((p_index+1 < c_rows)); then break; fi
done

# #region Returning
# declare -i i=0
# while ((i<${#param[@]})); do
# 	case "${param[i]}" in
# 		-r | --rows)
# 			echo -n $c_rows
# 			break
# 			;;
# 		*)
# 			;;
# 	esac
# 	((i++))
# done
# TODO: Add outputs for new options
case "$p_output" in
	("$C_OUTPUT_MAX_COLS" | "$C_OUTPUT_MAX_CHARACTERS_IN_A_ROW")
		echo $max_col
		;;
	("$C_OUTPUT_MAX_COLS_AT")
		echo $max_col_at
		;;
	("$C_OUTPUT_COLS_AT")
		# if [[ -z "${p_index+x}" ]]; then ((p_index=${#rows[@]}-1)); fi
		# echo "Index: $p_index"
		# echo "Answer: ${#rows[$p_index]}"
		if [[ -z "${p_index+x}" ]]; then
			# ((p_index=${#rows[@]}-1))
			# echo "Index: $p_index"
			# echo "${#rows[-1]}"
			echo $((${#rows[-1]}+${row_ilos[-1]}))
		else
			# echo "Index: $p_index"
			# echo "${#rows[$p_index]}"
			echo $((${#rows[$p_index]}+${row_ilos[$p_index]}))
		fi
		;;
	("$C_OUTPUT_CHARS_AT")
		# if [[ -z "${p_index+x}" ]]; then
		# 	echo "${#rows[-1]}"
		# else
		# 	echo "${#rows[$p_index]}"
		# fi
		if [[ -z "${p_index+x}" ]]; then ((p_index = -1)); fi
		echo "${#rows[$p_index]}"
		;;
	("$C_OUTPUT_ROW_AT")
		if [[ -z "${p_index+x}" ]]; then ((p_index=${#rows[@]}-1)); fi
		# echo "Index: $p_index"
		# IFS=$'\0'; echo "${rows[*]}"; IFS="$ORIG_IFS"
		echo "${rows[$p_index]}"
		;;
	("$C_OUTPUT_ROW_PRECEDED_BY")
		if [[ -z "${p_index+x}" ]]; then ((p_index=${#rows[@]}-1)); fi
		# echo "Index: $p_index"
		# IFS=$'\0'; echo "${rows[*]}"; 
		IFS=$'\0'
		if [[ "${rows[*]:0:$((p_index-1))}" =~ $p_regex ]]; then 
			IFS="$ORIG_IFS"
			echo "${BASH_REMATCH[*]}"
		else
			exit 1
		fi
		IFS="$ORIG_IFS"
		;;
	("$C_OUTPUT_ROW_SUCCEEDED_BY")
		if [[ -z "${p_index+x}" ]]; then ((p_index=0)); fi
		# echo "Index: $p_index"
		# IFS=$'\0'; echo "${rows[*]}"; 
		IFS=$'\0'
		if [[ "${rows[*]:$p_index}" =~ $p_regex ]]; then 
			IFS="$ORIG_IFS"
			echo "${BASH_REMATCH[*]}"
		else
			exit 1
		fi
		IFS="$ORIG_IFS"
		;;
	("$C_OUTPUT_ROWS")
		# if eval $flagTrackRows; then echo "$c_rows == ${#rows[@]}"; IFS='%'; echo "${rows[*]}"; IFS=$ORIG_IFS; else echo $c_rows; fi
		echo $c_rows
		;;
	(*)
		echo "I forgot to add the output for $p_output" 1>&2
		exit 1
		;;
esac
exit
# #endregion Returning